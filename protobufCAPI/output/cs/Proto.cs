// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Camera {

  /// <summary>Holder for reflection information generated from proto.proto</summary>
  public static partial class ProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwcm90by5wcm90bxIGY2FtZXJhIowBCg1DYXB0dXJlRm9ybWF0Eg0KBXdp",
            "ZHRoGAEgASgNEg4KBmhlaWdodBgCIAEoDRIRCglmcmFtZXJhdGUYAyABKAES",
            "KQoIZW5jb2RpbmcYBCABKA4yFy5jYW1lcmEuQ2FwdHVyZUVuY29kaW5nEh4K",
            "FmlzQXV0b0NvbnZlcnRTdXBwb3J0ZWQYBSABKAgiRAoGQ2FtZXJhEhIKCmNh",
            "bWVyYU5hbWUYBSABKAkSJgoHZm9ybWF0cxgGIAMoCzIVLmNhbWVyYS5DYXB0",
            "dXJlRm9ybWF0Ii0KCkNhbWVyYUxpc3QSHwoHY2FtZXJhcxgHIAMoCzIOLmNh",
            "bWVyYS5DYW1lcmEqUwoPQ2FwdHVyZUVuY29kaW5nEgsKB1VOS05PV04QABIK",
            "CgZSR0JBMzIQARIJCgVSR0IyNBACEggKBFlVWTIQAxIICgROVjEyEAQSCAoE",
            "TUpQRxAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Camera.CaptureEncoding), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Camera.CaptureFormat), global::Camera.CaptureFormat.Parser, new[]{ "Width", "Height", "Framerate", "Encoding", "IsAutoConvertSupported" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Camera.Camera), global::Camera.Camera.Parser, new[]{ "CameraName", "Formats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Camera.CameraList), global::Camera.CameraList.Parser, new[]{ "Cameras" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CaptureEncoding {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("RGBA32")] Rgba32 = 1,
    [pbr::OriginalName("RGB24")] Rgb24 = 2,
    [pbr::OriginalName("YUY2")] Yuy2 = 3,
    [pbr::OriginalName("NV12")] Nv12 = 4,
    [pbr::OriginalName("MJPG")] Mjpg = 5,
  }

  #endregion

  #region Messages
  public sealed partial class CaptureFormat : pb::IMessage<CaptureFormat> {
    private static readonly pb::MessageParser<CaptureFormat> _parser = new pb::MessageParser<CaptureFormat>(() => new CaptureFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Camera.ProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureFormat(CaptureFormat other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      framerate_ = other.framerate_;
      encoding_ = other.encoding_;
      isAutoConvertSupported_ = other.isAutoConvertSupported_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureFormat Clone() {
      return new CaptureFormat(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "framerate" field.</summary>
    public const int FramerateFieldNumber = 3;
    private double framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 4;
    private global::Camera.CaptureEncoding encoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Camera.CaptureEncoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "isAutoConvertSupported" field.</summary>
    public const int IsAutoConvertSupportedFieldNumber = 5;
    private bool isAutoConvertSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoConvertSupported {
      get { return isAutoConvertSupported_; }
      set {
        isAutoConvertSupported_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Framerate != other.Framerate) return false;
      if (Encoding != other.Encoding) return false;
      if (IsAutoConvertSupported != other.IsAutoConvertSupported) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Framerate != 0D) hash ^= Framerate.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (IsAutoConvertSupported != false) hash ^= IsAutoConvertSupported.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (Framerate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Framerate);
      }
      if (Encoding != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Encoding);
      }
      if (IsAutoConvertSupported != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAutoConvertSupported);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Framerate != 0D) {
        size += 1 + 8;
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (IsAutoConvertSupported != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureFormat other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Framerate != 0D) {
        Framerate = other.Framerate;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.IsAutoConvertSupported != false) {
        IsAutoConvertSupported = other.IsAutoConvertSupported;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 25: {
            Framerate = input.ReadDouble();
            break;
          }
          case 32: {
            encoding_ = (global::Camera.CaptureEncoding) input.ReadEnum();
            break;
          }
          case 40: {
            IsAutoConvertSupported = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Camera : pb::IMessage<Camera> {
    private static readonly pb::MessageParser<Camera> _parser = new pb::MessageParser<Camera>(() => new Camera());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Camera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Camera.ProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera(Camera other) : this() {
      cameraName_ = other.cameraName_;
      formats_ = other.formats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera Clone() {
      return new Camera(this);
    }

    /// <summary>Field number for the "cameraName" field.</summary>
    public const int CameraNameFieldNumber = 5;
    private string cameraName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraName {
      get { return cameraName_; }
      set {
        cameraName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "formats" field.</summary>
    public const int FormatsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Camera.CaptureFormat> _repeated_formats_codec
        = pb::FieldCodec.ForMessage(50, global::Camera.CaptureFormat.Parser);
    private readonly pbc::RepeatedField<global::Camera.CaptureFormat> formats_ = new pbc::RepeatedField<global::Camera.CaptureFormat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Camera.CaptureFormat> Formats {
      get { return formats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Camera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Camera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CameraName != other.CameraName) return false;
      if(!formats_.Equals(other.formats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CameraName.Length != 0) hash ^= CameraName.GetHashCode();
      hash ^= formats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CameraName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CameraName);
      }
      formats_.WriteTo(output, _repeated_formats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CameraName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraName);
      }
      size += formats_.CalculateSize(_repeated_formats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Camera other) {
      if (other == null) {
        return;
      }
      if (other.CameraName.Length != 0) {
        CameraName = other.CameraName;
      }
      formats_.Add(other.formats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 42: {
            CameraName = input.ReadString();
            break;
          }
          case 50: {
            formats_.AddEntriesFrom(input, _repeated_formats_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraList : pb::IMessage<CameraList> {
    private static readonly pb::MessageParser<CameraList> _parser = new pb::MessageParser<CameraList>(() => new CameraList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Camera.ProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraList(CameraList other) : this() {
      cameras_ = other.cameras_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraList Clone() {
      return new CameraList(this);
    }

    /// <summary>Field number for the "cameras" field.</summary>
    public const int CamerasFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Camera.Camera> _repeated_cameras_codec
        = pb::FieldCodec.ForMessage(58, global::Camera.Camera.Parser);
    private readonly pbc::RepeatedField<global::Camera.Camera> cameras_ = new pbc::RepeatedField<global::Camera.Camera>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Camera.Camera> Cameras {
      get { return cameras_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cameras_.Equals(other.cameras_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cameras_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cameras_.WriteTo(output, _repeated_cameras_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cameras_.CalculateSize(_repeated_cameras_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraList other) {
      if (other == null) {
        return;
      }
      cameras_.Add(other.cameras_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 58: {
            cameras_.AddEntriesFrom(input, _repeated_cameras_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
