// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef PROTOBUF_proto_2eproto__INCLUDED
#define PROTOBUF_proto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace camera {
class Camera;
class CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class CameraList;
class CameraListDefaultTypeInternal;
extern CameraListDefaultTypeInternal _CameraList_default_instance_;
class CaptureFormat;
class CaptureFormatDefaultTypeInternal;
extern CaptureFormatDefaultTypeInternal _CaptureFormat_default_instance_;
class StartCaptureArguments;
class StartCaptureArgumentsDefaultTypeInternal;
extern StartCaptureArgumentsDefaultTypeInternal _StartCaptureArguments_default_instance_;
class StartCaptureResult;
class StartCaptureResultDefaultTypeInternal;
extern StartCaptureResultDefaultTypeInternal _StartCaptureResult_default_instance_;
}  // namespace camera

namespace camera {

namespace protobuf_proto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2eproto

enum CaptureEncoding {
  Any = 0,
  Unknown = 1,
  ARGB = 2,
  XRGB = 3,
  I420 = 4,
  NV12 = 5,
  YV12 = 6,
  Y800 = 7,
  YVYU = 8,
  YUY2 = 9,
  UYVY = 10,
  HDYC = 11,
  MJPEG = 12,
  H264 = 13,
  CaptureEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CaptureEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CaptureEncoding_IsValid(int value);
const CaptureEncoding CaptureEncoding_MIN = Any;
const CaptureEncoding CaptureEncoding_MAX = H264;
const int CaptureEncoding_ARRAYSIZE = CaptureEncoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaptureEncoding_descriptor();
inline const ::std::string& CaptureEncoding_Name(CaptureEncoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaptureEncoding_descriptor(), value);
}
inline bool CaptureEncoding_Parse(
    const ::std::string& name, CaptureEncoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaptureEncoding>(
    CaptureEncoding_descriptor(), name, value);
}
enum StartResult {
  Success = 0,
  InUse = 1,
  Error = 2,
  StartResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StartResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StartResult_IsValid(int value);
const StartResult StartResult_MIN = Success;
const StartResult StartResult_MAX = Error;
const int StartResult_ARRAYSIZE = StartResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartResult_descriptor();
inline const ::std::string& StartResult_Name(StartResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartResult_descriptor(), value);
}
inline bool StartResult_Parse(
    const ::std::string& name, StartResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartResult>(
    StartResult_descriptor(), name, value);
}
// ===================================================================

class CaptureFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.CaptureFormat) */ {
 public:
  CaptureFormat();
  virtual ~CaptureFormat();

  CaptureFormat(const CaptureFormat& from);

  inline CaptureFormat& operator=(const CaptureFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureFormat& default_instance();

  static inline const CaptureFormat* internal_default_instance() {
    return reinterpret_cast<const CaptureFormat*>(
               &_CaptureFormat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CaptureFormat* other);

  // implements Message ----------------------------------------------

  inline CaptureFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  CaptureFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CaptureFormat& from);
  void MergeFrom(const CaptureFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CaptureFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // double framerate = 3;
  void clear_framerate();
  static const int kFramerateFieldNumber = 3;
  double framerate() const;
  void set_framerate(double value);

  // .camera.CaptureEncoding encoding = 4;
  void clear_encoding();
  static const int kEncodingFieldNumber = 4;
  ::camera::CaptureEncoding encoding() const;
  void set_encoding(::camera::CaptureEncoding value);

  // @@protoc_insertion_point(class_scope:camera.CaptureFormat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double framerate_;
  int encoding_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Camera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.Camera) */ {
 public:
  Camera();
  virtual ~Camera();

  Camera(const Camera& from);

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camera& default_instance();

  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Camera* other);

  // implements Message ----------------------------------------------

  inline Camera* New() const PROTOBUF_FINAL { return New(NULL); }

  Camera* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .camera.CaptureFormat formats = 7;
  int formats_size() const;
  void clear_formats();
  static const int kFormatsFieldNumber = 7;
  const ::camera::CaptureFormat& formats(int index) const;
  ::camera::CaptureFormat* mutable_formats(int index);
  ::camera::CaptureFormat* add_formats();
  ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >*
      mutable_formats();
  const ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >&
      formats() const;

  // string cameraName = 5;
  void clear_cameraname();
  static const int kCameraNameFieldNumber = 5;
  const ::std::string& cameraname() const;
  void set_cameraname(const ::std::string& value);
  #if LANG_CXX11
  void set_cameraname(::std::string&& value);
  #endif
  void set_cameraname(const char* value);
  void set_cameraname(const char* value, size_t size);
  ::std::string* mutable_cameraname();
  ::std::string* release_cameraname();
  void set_allocated_cameraname(::std::string* cameraname);

  // string cameraPath = 6;
  void clear_camerapath();
  static const int kCameraPathFieldNumber = 6;
  const ::std::string& camerapath() const;
  void set_camerapath(const ::std::string& value);
  #if LANG_CXX11
  void set_camerapath(::std::string&& value);
  #endif
  void set_camerapath(const char* value);
  void set_camerapath(const char* value, size_t size);
  ::std::string* mutable_camerapath();
  ::std::string* release_camerapath();
  void set_allocated_camerapath(::std::string* camerapath);

  // @@protoc_insertion_point(class_scope:camera.Camera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat > formats_;
  ::google::protobuf::internal::ArenaStringPtr cameraname_;
  ::google::protobuf::internal::ArenaStringPtr camerapath_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.CameraList) */ {
 public:
  CameraList();
  virtual ~CameraList();

  CameraList(const CameraList& from);

  inline CameraList& operator=(const CameraList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraList& default_instance();

  static inline const CameraList* internal_default_instance() {
    return reinterpret_cast<const CameraList*>(
               &_CameraList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CameraList* other);

  // implements Message ----------------------------------------------

  inline CameraList* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraList& from);
  void MergeFrom(const CameraList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .camera.Camera cameras = 7;
  int cameras_size() const;
  void clear_cameras();
  static const int kCamerasFieldNumber = 7;
  const ::camera::Camera& cameras(int index) const;
  ::camera::Camera* mutable_cameras(int index);
  ::camera::Camera* add_cameras();
  ::google::protobuf::RepeatedPtrField< ::camera::Camera >*
      mutable_cameras();
  const ::google::protobuf::RepeatedPtrField< ::camera::Camera >&
      cameras() const;

  // @@protoc_insertion_point(class_scope:camera.CameraList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::camera::Camera > cameras_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartCaptureArguments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.StartCaptureArguments) */ {
 public:
  StartCaptureArguments();
  virtual ~StartCaptureArguments();

  StartCaptureArguments(const StartCaptureArguments& from);

  inline StartCaptureArguments& operator=(const StartCaptureArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartCaptureArguments& default_instance();

  static inline const StartCaptureArguments* internal_default_instance() {
    return reinterpret_cast<const StartCaptureArguments*>(
               &_StartCaptureArguments_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StartCaptureArguments* other);

  // implements Message ----------------------------------------------

  inline StartCaptureArguments* New() const PROTOBUF_FINAL { return New(NULL); }

  StartCaptureArguments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartCaptureArguments& from);
  void MergeFrom(const StartCaptureArguments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartCaptureArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cameraName = 8;
  void clear_cameraname();
  static const int kCameraNameFieldNumber = 8;
  const ::std::string& cameraname() const;
  void set_cameraname(const ::std::string& value);
  #if LANG_CXX11
  void set_cameraname(::std::string&& value);
  #endif
  void set_cameraname(const char* value);
  void set_cameraname(const char* value, size_t size);
  ::std::string* mutable_cameraname();
  ::std::string* release_cameraname();
  void set_allocated_cameraname(::std::string* cameraname);

  // string cameraPath = 9;
  void clear_camerapath();
  static const int kCameraPathFieldNumber = 9;
  const ::std::string& camerapath() const;
  void set_camerapath(const ::std::string& value);
  #if LANG_CXX11
  void set_camerapath(::std::string&& value);
  #endif
  void set_camerapath(const char* value);
  void set_camerapath(const char* value, size_t size);
  ::std::string* mutable_camerapath();
  ::std::string* release_camerapath();
  void set_allocated_camerapath(::std::string* camerapath);

  // .camera.CaptureEncoding encoding = 13;
  void clear_encoding();
  static const int kEncodingFieldNumber = 13;
  ::camera::CaptureEncoding encoding() const;
  void set_encoding(::camera::CaptureEncoding value);

  // uint32 width = 10;
  void clear_width();
  static const int kWidthFieldNumber = 10;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 11;
  void clear_height();
  static const int kHeightFieldNumber = 11;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // double framerate = 12;
  void clear_framerate();
  static const int kFramerateFieldNumber = 12;
  double framerate() const;
  void set_framerate(double value);

  // @@protoc_insertion_point(class_scope:camera.StartCaptureArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cameraname_;
  ::google::protobuf::internal::ArenaStringPtr camerapath_;
  int encoding_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double framerate_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartCaptureResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.StartCaptureResult) */ {
 public:
  StartCaptureResult();
  virtual ~StartCaptureResult();

  StartCaptureResult(const StartCaptureResult& from);

  inline StartCaptureResult& operator=(const StartCaptureResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartCaptureResult& default_instance();

  static inline const StartCaptureResult* internal_default_instance() {
    return reinterpret_cast<const StartCaptureResult*>(
               &_StartCaptureResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StartCaptureResult* other);

  // implements Message ----------------------------------------------

  inline StartCaptureResult* New() const PROTOBUF_FINAL { return New(NULL); }

  StartCaptureResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartCaptureResult& from);
  void MergeFrom(const StartCaptureResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartCaptureResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool canResetGraph = 14;
  void clear_canresetgraph();
  static const int kCanResetGraphFieldNumber = 14;
  bool canresetgraph() const;
  void set_canresetgraph(bool value);

  // bool canSetAudioConfig = 15;
  void clear_cansetaudioconfig();
  static const int kCanSetAudioConfigFieldNumber = 15;
  bool cansetaudioconfig() const;
  void set_cansetaudioconfig(bool value);

  // bool canSetVideoConfig = 16;
  void clear_cansetvideoconfig();
  static const int kCanSetVideoConfigFieldNumber = 16;
  bool cansetvideoconfig() const;
  void set_cansetvideoconfig(bool value);

  // bool canConnectFilters = 17;
  void clear_canconnectfilters();
  static const int kCanConnectFiltersFieldNumber = 17;
  bool canconnectfilters() const;
  void set_canconnectfilters(bool value);

  // .camera.StartResult result = 18;
  void clear_result();
  static const int kResultFieldNumber = 18;
  ::camera::StartResult result() const;
  void set_result(::camera::StartResult value);

  // uint64 devicePointer = 19;
  void clear_devicepointer();
  static const int kDevicePointerFieldNumber = 19;
  ::google::protobuf::uint64 devicepointer() const;
  void set_devicepointer(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:camera.StartCaptureResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool canresetgraph_;
  bool cansetaudioconfig_;
  bool cansetvideoconfig_;
  bool canconnectfilters_;
  int result_;
  ::google::protobuf::uint64 devicepointer_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureFormat

// uint32 width = 1;
inline void CaptureFormat::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 CaptureFormat::width() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.width)
  return width_;
}
inline void CaptureFormat::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.width)
}

// uint32 height = 2;
inline void CaptureFormat::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 CaptureFormat::height() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.height)
  return height_;
}
inline void CaptureFormat::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.height)
}

// double framerate = 3;
inline void CaptureFormat::clear_framerate() {
  framerate_ = 0;
}
inline double CaptureFormat::framerate() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.framerate)
  return framerate_;
}
inline void CaptureFormat::set_framerate(double value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.framerate)
}

// .camera.CaptureEncoding encoding = 4;
inline void CaptureFormat::clear_encoding() {
  encoding_ = 0;
}
inline ::camera::CaptureEncoding CaptureFormat::encoding() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.encoding)
  return static_cast< ::camera::CaptureEncoding >(encoding_);
}
inline void CaptureFormat::set_encoding(::camera::CaptureEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.encoding)
}

// -------------------------------------------------------------------

// Camera

// string cameraName = 5;
inline void Camera::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera::cameraname() const {
  // @@protoc_insertion_point(field_get:camera.Camera.cameraName)
  return cameraname_.GetNoArena();
}
inline void Camera::set_cameraname(const ::std::string& value) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.Camera.cameraName)
}
#if LANG_CXX11
inline void Camera::set_cameraname(::std::string&& value) {
  
  cameraname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.Camera.cameraName)
}
#endif
inline void Camera::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.Camera.cameraName)
}
inline void Camera::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.Camera.cameraName)
}
inline ::std::string* Camera::mutable_cameraname() {
  
  // @@protoc_insertion_point(field_mutable:camera.Camera.cameraName)
  return cameraname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_cameraname() {
  // @@protoc_insertion_point(field_release:camera.Camera.cameraName)
  
  return cameraname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname != NULL) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:camera.Camera.cameraName)
}

// string cameraPath = 6;
inline void Camera::clear_camerapath() {
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Camera::camerapath() const {
  // @@protoc_insertion_point(field_get:camera.Camera.cameraPath)
  return camerapath_.GetNoArena();
}
inline void Camera::set_camerapath(const ::std::string& value) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.Camera.cameraPath)
}
#if LANG_CXX11
inline void Camera::set_camerapath(::std::string&& value) {
  
  camerapath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.Camera.cameraPath)
}
#endif
inline void Camera::set_camerapath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.Camera.cameraPath)
}
inline void Camera::set_camerapath(const char* value, size_t size) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.Camera.cameraPath)
}
inline ::std::string* Camera::mutable_camerapath() {
  
  // @@protoc_insertion_point(field_mutable:camera.Camera.cameraPath)
  return camerapath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Camera::release_camerapath() {
  // @@protoc_insertion_point(field_release:camera.Camera.cameraPath)
  
  return camerapath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Camera::set_allocated_camerapath(::std::string* camerapath) {
  if (camerapath != NULL) {
    
  } else {
    
  }
  camerapath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camerapath);
  // @@protoc_insertion_point(field_set_allocated:camera.Camera.cameraPath)
}

// repeated .camera.CaptureFormat formats = 7;
inline int Camera::formats_size() const {
  return formats_.size();
}
inline void Camera::clear_formats() {
  formats_.Clear();
}
inline const ::camera::CaptureFormat& Camera::formats(int index) const {
  // @@protoc_insertion_point(field_get:camera.Camera.formats)
  return formats_.Get(index);
}
inline ::camera::CaptureFormat* Camera::mutable_formats(int index) {
  // @@protoc_insertion_point(field_mutable:camera.Camera.formats)
  return formats_.Mutable(index);
}
inline ::camera::CaptureFormat* Camera::add_formats() {
  // @@protoc_insertion_point(field_add:camera.Camera.formats)
  return formats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >*
Camera::mutable_formats() {
  // @@protoc_insertion_point(field_mutable_list:camera.Camera.formats)
  return &formats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >&
Camera::formats() const {
  // @@protoc_insertion_point(field_list:camera.Camera.formats)
  return formats_;
}

// -------------------------------------------------------------------

// CameraList

// repeated .camera.Camera cameras = 7;
inline int CameraList::cameras_size() const {
  return cameras_.size();
}
inline void CameraList::clear_cameras() {
  cameras_.Clear();
}
inline const ::camera::Camera& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:camera.CameraList.cameras)
  return cameras_.Get(index);
}
inline ::camera::Camera* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:camera.CameraList.cameras)
  return cameras_.Mutable(index);
}
inline ::camera::Camera* CameraList::add_cameras() {
  // @@protoc_insertion_point(field_add:camera.CameraList.cameras)
  return cameras_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::camera::Camera >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:camera.CameraList.cameras)
  return &cameras_;
}
inline const ::google::protobuf::RepeatedPtrField< ::camera::Camera >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:camera.CameraList.cameras)
  return cameras_;
}

// -------------------------------------------------------------------

// StartCaptureArguments

// string cameraName = 8;
inline void StartCaptureArguments::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartCaptureArguments::cameraname() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.cameraName)
  return cameraname_.GetNoArena();
}
inline void StartCaptureArguments::set_cameraname(const ::std::string& value) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.cameraName)
}
#if LANG_CXX11
inline void StartCaptureArguments::set_cameraname(::std::string&& value) {
  
  cameraname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.StartCaptureArguments.cameraName)
}
#endif
inline void StartCaptureArguments::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.StartCaptureArguments.cameraName)
}
inline void StartCaptureArguments::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.StartCaptureArguments.cameraName)
}
inline ::std::string* StartCaptureArguments::mutable_cameraname() {
  
  // @@protoc_insertion_point(field_mutable:camera.StartCaptureArguments.cameraName)
  return cameraname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartCaptureArguments::release_cameraname() {
  // @@protoc_insertion_point(field_release:camera.StartCaptureArguments.cameraName)
  
  return cameraname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartCaptureArguments::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname != NULL) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:camera.StartCaptureArguments.cameraName)
}

// string cameraPath = 9;
inline void StartCaptureArguments::clear_camerapath() {
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartCaptureArguments::camerapath() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.cameraPath)
  return camerapath_.GetNoArena();
}
inline void StartCaptureArguments::set_camerapath(const ::std::string& value) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.cameraPath)
}
#if LANG_CXX11
inline void StartCaptureArguments::set_camerapath(::std::string&& value) {
  
  camerapath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.StartCaptureArguments.cameraPath)
}
#endif
inline void StartCaptureArguments::set_camerapath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.StartCaptureArguments.cameraPath)
}
inline void StartCaptureArguments::set_camerapath(const char* value, size_t size) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.StartCaptureArguments.cameraPath)
}
inline ::std::string* StartCaptureArguments::mutable_camerapath() {
  
  // @@protoc_insertion_point(field_mutable:camera.StartCaptureArguments.cameraPath)
  return camerapath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartCaptureArguments::release_camerapath() {
  // @@protoc_insertion_point(field_release:camera.StartCaptureArguments.cameraPath)
  
  return camerapath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartCaptureArguments::set_allocated_camerapath(::std::string* camerapath) {
  if (camerapath != NULL) {
    
  } else {
    
  }
  camerapath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camerapath);
  // @@protoc_insertion_point(field_set_allocated:camera.StartCaptureArguments.cameraPath)
}

// uint32 width = 10;
inline void StartCaptureArguments::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 StartCaptureArguments::width() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.width)
  return width_;
}
inline void StartCaptureArguments::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.width)
}

// uint32 height = 11;
inline void StartCaptureArguments::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 StartCaptureArguments::height() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.height)
  return height_;
}
inline void StartCaptureArguments::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.height)
}

// double framerate = 12;
inline void StartCaptureArguments::clear_framerate() {
  framerate_ = 0;
}
inline double StartCaptureArguments::framerate() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.framerate)
  return framerate_;
}
inline void StartCaptureArguments::set_framerate(double value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.framerate)
}

// .camera.CaptureEncoding encoding = 13;
inline void StartCaptureArguments::clear_encoding() {
  encoding_ = 0;
}
inline ::camera::CaptureEncoding StartCaptureArguments::encoding() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureArguments.encoding)
  return static_cast< ::camera::CaptureEncoding >(encoding_);
}
inline void StartCaptureArguments::set_encoding(::camera::CaptureEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureArguments.encoding)
}

// -------------------------------------------------------------------

// StartCaptureResult

// bool canResetGraph = 14;
inline void StartCaptureResult::clear_canresetgraph() {
  canresetgraph_ = false;
}
inline bool StartCaptureResult::canresetgraph() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.canResetGraph)
  return canresetgraph_;
}
inline void StartCaptureResult::set_canresetgraph(bool value) {
  
  canresetgraph_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.canResetGraph)
}

// bool canSetAudioConfig = 15;
inline void StartCaptureResult::clear_cansetaudioconfig() {
  cansetaudioconfig_ = false;
}
inline bool StartCaptureResult::cansetaudioconfig() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.canSetAudioConfig)
  return cansetaudioconfig_;
}
inline void StartCaptureResult::set_cansetaudioconfig(bool value) {
  
  cansetaudioconfig_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.canSetAudioConfig)
}

// bool canSetVideoConfig = 16;
inline void StartCaptureResult::clear_cansetvideoconfig() {
  cansetvideoconfig_ = false;
}
inline bool StartCaptureResult::cansetvideoconfig() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.canSetVideoConfig)
  return cansetvideoconfig_;
}
inline void StartCaptureResult::set_cansetvideoconfig(bool value) {
  
  cansetvideoconfig_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.canSetVideoConfig)
}

// bool canConnectFilters = 17;
inline void StartCaptureResult::clear_canconnectfilters() {
  canconnectfilters_ = false;
}
inline bool StartCaptureResult::canconnectfilters() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.canConnectFilters)
  return canconnectfilters_;
}
inline void StartCaptureResult::set_canconnectfilters(bool value) {
  
  canconnectfilters_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.canConnectFilters)
}

// .camera.StartResult result = 18;
inline void StartCaptureResult::clear_result() {
  result_ = 0;
}
inline ::camera::StartResult StartCaptureResult::result() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.result)
  return static_cast< ::camera::StartResult >(result_);
}
inline void StartCaptureResult::set_result(::camera::StartResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.result)
}

// uint64 devicePointer = 19;
inline void StartCaptureResult::clear_devicepointer() {
  devicepointer_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StartCaptureResult::devicepointer() const {
  // @@protoc_insertion_point(field_get:camera.StartCaptureResult.devicePointer)
  return devicepointer_;
}
inline void StartCaptureResult::set_devicepointer(::google::protobuf::uint64 value) {
  
  devicepointer_ = value;
  // @@protoc_insertion_point(field_set:camera.StartCaptureResult.devicePointer)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace camera

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::camera::CaptureEncoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::camera::CaptureEncoding>() {
  return ::camera::CaptureEncoding_descriptor();
}
template <> struct is_proto_enum< ::camera::StartResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::camera::StartResult>() {
  return ::camera::StartResult_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2eproto__INCLUDED
