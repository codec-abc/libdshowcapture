// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cameraReaderWindows {
class CaptureFormatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaptureFormat> {
} _CaptureFormat_default_instance_;
class CameraReaderWindowsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CameraReaderWindows> {
} _CameraReaderWindows_default_instance_;
class CameraListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CameraList> {
} _CameraList_default_instance_;
class StartCaptureArgumentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartCaptureArguments> {
} _StartCaptureArguments_default_instance_;
class StartCaptureResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartCaptureResult> {
} _StartCaptureResult_default_instance_;

namespace protobuf_proto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, frameinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, encoding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraReaderWindows, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraReaderWindows, cameraname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraReaderWindows, camerapath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraReaderWindows, formats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraList, cameras_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, cameraname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, camerapath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, frameinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureArguments, flippingmode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, canresetgraph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, cansetaudioconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, cansetvideoconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, canconnectfilters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCaptureResult, devicepointer_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CaptureFormat)},
  { 9, -1, sizeof(CameraReaderWindows)},
  { 17, -1, sizeof(CameraList)},
  { 23, -1, sizeof(StartCaptureArguments)},
  { 35, -1, sizeof(StartCaptureResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CaptureFormat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraReaderWindows_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartCaptureArguments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartCaptureResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CaptureFormat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CameraReaderWindows_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CameraList_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _StartCaptureArguments_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _StartCaptureResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CaptureFormat_default_instance_.DefaultConstruct();
  _CameraReaderWindows_default_instance_.DefaultConstruct();
  _CameraList_default_instance_.DefaultConstruct();
  _StartCaptureArguments_default_instance_.DefaultConstruct();
  _StartCaptureResult_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013proto.proto\022\023cameraReaderWindows\"}\n\rCa"
      "ptureFormat\022\r\n\005width\030\001 \001(\r\022\016\n\006height\030\002 \001"
      "(\r\022\025\n\rframeinterval\030\003 \001(\004\0226\n\010encoding\030\004 "
      "\001(\0162$.cameraReaderWindows.CaptureEncodin"
      "g\"r\n\023CameraReaderWindows\022\022\n\ncameraName\030\005"
      " \001(\t\022\022\n\ncameraPath\030\006 \001(\t\0223\n\007formats\030\007 \003("
      "\0132\".cameraReaderWindows.CaptureFormat\"G\n"
      "\nCameraList\0229\n\007cameras\030\007 \003(\0132(.cameraRea"
      "derWindows.CameraReaderWindows\"\336\001\n\025Start"
      "CaptureArguments\022\022\n\ncameraName\030\010 \001(\t\022\022\n\n"
      "cameraPath\030\t \001(\t\022\r\n\005width\030\n \001(\r\022\016\n\006heigh"
      "t\030\013 \001(\r\022\025\n\rframeinterval\030\014 \001(\004\0226\n\010encodi"
      "ng\030\r \001(\0162$.cameraReaderWindows.CaptureEn"
      "coding\022/\n\014flippingMode\030\016 \001(\0162\031.cameraRea"
      "derWindows.Flip\"\305\001\n\022StartCaptureResult\022\025"
      "\n\rcanResetGraph\030\016 \001(\010\022\031\n\021canSetAudioConf"
      "ig\030\017 \001(\010\022\031\n\021canSetVideoConfig\030\020 \001(\010\022\031\n\021c"
      "anConnectFilters\030\021 \001(\010\0220\n\006result\030\022 \001(\0162 "
      ".cameraReaderWindows.StartResult\022\025\n\rdevi"
      "cePointer\030\023 \001(\004*\240\001\n\017CaptureEncoding\022\007\n\003A"
      "ny\020\000\022\013\n\007Unknown\020\001\022\010\n\004ARGB\020\002\022\010\n\004XRGB\020\003\022\010\n"
      "\004I420\020\004\022\010\n\004NV12\020\005\022\010\n\004YV12\020\006\022\010\n\004Y800\020\007\022\010\n"
      "\004YVYU\020\010\022\010\n\004YUY2\020\t\022\010\n\004UYVY\020\n\022\010\n\004HDYC\020\013\022\t\n"
      "\005MJPEG\020\014\022\010\n\004H264\020\r*L\n\004Flip\022\014\n\010FlipNone\020\000"
      "\022\022\n\016FlipVertically\020\001\022\024\n\020FlipHorizontally"
      "\020\002\022\014\n\010FlipBoth\020\003*0\n\013StartResult\022\013\n\007Succe"
      "ss\020\000\022\t\n\005InUse\020\001\022\t\n\005Error\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1074);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2eproto

const ::google::protobuf::EnumDescriptor* CaptureEncoding_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[0];
}
bool CaptureEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Flip_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[1];
}
bool Flip_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StartResult_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[2];
}
bool StartResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureFormat::kWidthFieldNumber;
const int CaptureFormat::kHeightFieldNumber;
const int CaptureFormat::kFrameintervalFieldNumber;
const int CaptureFormat::kEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureFormat::CaptureFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraReaderWindows.CaptureFormat)
}
CaptureFormat::CaptureFormat(const CaptureFormat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&width_) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:cameraReaderWindows.CaptureFormat)
}

void CaptureFormat::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&width_) + sizeof(encoding_));
  _cached_size_ = 0;
}

CaptureFormat::~CaptureFormat() {
  // @@protoc_insertion_point(destructor:cameraReaderWindows.CaptureFormat)
  SharedDtor();
}

void CaptureFormat::SharedDtor() {
}

void CaptureFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureFormat::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CaptureFormat& CaptureFormat::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaptureFormat* CaptureFormat::New(::google::protobuf::Arena* arena) const {
  CaptureFormat* n = new CaptureFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptureFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraReaderWindows.CaptureFormat)
  ::memset(&width_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&width_) + sizeof(encoding_));
}

bool CaptureFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraReaderWindows.CaptureFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frameinterval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frameinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cameraReaderWindows.CaptureEncoding encoding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::cameraReaderWindows::CaptureEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraReaderWindows.CaptureFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraReaderWindows.CaptureFormat)
  return false;
#undef DO_
}

void CaptureFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraReaderWindows.CaptureFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // uint64 frameinterval = 3;
  if (this->frameinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->frameinterval(), output);
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encoding(), output);
  }

  // @@protoc_insertion_point(serialize_end:cameraReaderWindows.CaptureFormat)
}

::google::protobuf::uint8* CaptureFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraReaderWindows.CaptureFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // uint64 frameinterval = 3;
  if (this->frameinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->frameinterval(), target);
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encoding(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cameraReaderWindows.CaptureFormat)
  return target;
}

size_t CaptureFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraReaderWindows.CaptureFormat)
  size_t total_size = 0;

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint64 frameinterval = 3;
  if (this->frameinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frameinterval());
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraReaderWindows.CaptureFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const CaptureFormat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CaptureFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraReaderWindows.CaptureFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraReaderWindows.CaptureFormat)
    MergeFrom(*source);
  }
}

void CaptureFormat::MergeFrom(const CaptureFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraReaderWindows.CaptureFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.frameinterval() != 0) {
    set_frameinterval(from.frameinterval());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void CaptureFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraReaderWindows.CaptureFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureFormat::CopyFrom(const CaptureFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraReaderWindows.CaptureFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureFormat::IsInitialized() const {
  return true;
}

void CaptureFormat::Swap(CaptureFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureFormat::InternalSwap(CaptureFormat* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(frameinterval_, other->frameinterval_);
  std::swap(encoding_, other->encoding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaptureFormat::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureFormat

// uint32 width = 1;
void CaptureFormat::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 CaptureFormat::width() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CaptureFormat.width)
  return width_;
}
void CaptureFormat::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CaptureFormat.width)
}

// uint32 height = 2;
void CaptureFormat::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 CaptureFormat::height() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CaptureFormat.height)
  return height_;
}
void CaptureFormat::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CaptureFormat.height)
}

// uint64 frameinterval = 3;
void CaptureFormat::clear_frameinterval() {
  frameinterval_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CaptureFormat::frameinterval() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CaptureFormat.frameinterval)
  return frameinterval_;
}
void CaptureFormat::set_frameinterval(::google::protobuf::uint64 value) {
  
  frameinterval_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CaptureFormat.frameinterval)
}

// .cameraReaderWindows.CaptureEncoding encoding = 4;
void CaptureFormat::clear_encoding() {
  encoding_ = 0;
}
::cameraReaderWindows::CaptureEncoding CaptureFormat::encoding() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CaptureFormat.encoding)
  return static_cast< ::cameraReaderWindows::CaptureEncoding >(encoding_);
}
void CaptureFormat::set_encoding(::cameraReaderWindows::CaptureEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CaptureFormat.encoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraReaderWindows::kCameraNameFieldNumber;
const int CameraReaderWindows::kCameraPathFieldNumber;
const int CameraReaderWindows::kFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraReaderWindows::CameraReaderWindows()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraReaderWindows.CameraReaderWindows)
}
CameraReaderWindows::CameraReaderWindows(const CameraReaderWindows& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      formats_(from.formats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cameraname().size() > 0) {
    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  camerapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camerapath().size() > 0) {
    camerapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camerapath_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraReaderWindows.CameraReaderWindows)
}

void CameraReaderWindows::SharedCtor() {
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CameraReaderWindows::~CameraReaderWindows() {
  // @@protoc_insertion_point(destructor:cameraReaderWindows.CameraReaderWindows)
  SharedDtor();
}

void CameraReaderWindows::SharedDtor() {
  cameraname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraReaderWindows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraReaderWindows::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraReaderWindows& CameraReaderWindows::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraReaderWindows* CameraReaderWindows::New(::google::protobuf::Arena* arena) const {
  CameraReaderWindows* n = new CameraReaderWindows;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraReaderWindows::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraReaderWindows.CameraReaderWindows)
  formats_.Clear();
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CameraReaderWindows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraReaderWindows.CameraReaderWindows)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cameraName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cameraname().data(), this->cameraname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cameraReaderWindows.CameraReaderWindows.cameraName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cameraPath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camerapath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camerapath().data(), this->camerapath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cameraReaderWindows.CameraReaderWindows.cameraPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cameraReaderWindows.CaptureFormat formats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraReaderWindows.CameraReaderWindows)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraReaderWindows.CameraReaderWindows)
  return false;
#undef DO_
}

void CameraReaderWindows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraReaderWindows.CameraReaderWindows)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.CameraReaderWindows.cameraName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cameraname(), output);
  }

  // string cameraPath = 6;
  if (this->camerapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camerapath().data(), this->camerapath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.CameraReaderWindows.cameraPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->camerapath(), output);
  }

  // repeated .cameraReaderWindows.CaptureFormat formats = 7;
  for (unsigned int i = 0, n = this->formats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->formats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cameraReaderWindows.CameraReaderWindows)
}

::google::protobuf::uint8* CameraReaderWindows::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraReaderWindows.CameraReaderWindows)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.CameraReaderWindows.cameraName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cameraname(), target);
  }

  // string cameraPath = 6;
  if (this->camerapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camerapath().data(), this->camerapath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.CameraReaderWindows.cameraPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->camerapath(), target);
  }

  // repeated .cameraReaderWindows.CaptureFormat formats = 7;
  for (unsigned int i = 0, n = this->formats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->formats(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cameraReaderWindows.CameraReaderWindows)
  return target;
}

size_t CameraReaderWindows::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraReaderWindows.CameraReaderWindows)
  size_t total_size = 0;

  // repeated .cameraReaderWindows.CaptureFormat formats = 7;
  {
    unsigned int count = this->formats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formats(i));
    }
  }

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cameraname());
  }

  // string cameraPath = 6;
  if (this->camerapath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camerapath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraReaderWindows::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraReaderWindows.CameraReaderWindows)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraReaderWindows* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraReaderWindows>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraReaderWindows.CameraReaderWindows)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraReaderWindows.CameraReaderWindows)
    MergeFrom(*source);
  }
}

void CameraReaderWindows::MergeFrom(const CameraReaderWindows& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraReaderWindows.CameraReaderWindows)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formats_.MergeFrom(from.formats_);
  if (from.cameraname().size() > 0) {

    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  if (from.camerapath().size() > 0) {

    camerapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camerapath_);
  }
}

void CameraReaderWindows::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraReaderWindows.CameraReaderWindows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraReaderWindows::CopyFrom(const CameraReaderWindows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraReaderWindows.CameraReaderWindows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraReaderWindows::IsInitialized() const {
  return true;
}

void CameraReaderWindows::Swap(CameraReaderWindows* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraReaderWindows::InternalSwap(CameraReaderWindows* other) {
  formats_.InternalSwap(&other->formats_);
  cameraname_.Swap(&other->cameraname_);
  camerapath_.Swap(&other->camerapath_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraReaderWindows::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraReaderWindows

// string cameraName = 5;
void CameraReaderWindows::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CameraReaderWindows::cameraname() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CameraReaderWindows.cameraName)
  return cameraname_.GetNoArena();
}
void CameraReaderWindows::set_cameraname(const ::std::string& value) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CameraReaderWindows.cameraName)
}
#if LANG_CXX11
void CameraReaderWindows::set_cameraname(::std::string&& value) {
  
  cameraname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraReaderWindows.CameraReaderWindows.cameraName)
}
#endif
void CameraReaderWindows::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraReaderWindows.CameraReaderWindows.cameraName)
}
void CameraReaderWindows::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraReaderWindows.CameraReaderWindows.cameraName)
}
::std::string* CameraReaderWindows::mutable_cameraname() {
  
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.CameraReaderWindows.cameraName)
  return cameraname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraReaderWindows::release_cameraname() {
  // @@protoc_insertion_point(field_release:cameraReaderWindows.CameraReaderWindows.cameraName)
  
  return cameraname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraReaderWindows::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname != NULL) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:cameraReaderWindows.CameraReaderWindows.cameraName)
}

// string cameraPath = 6;
void CameraReaderWindows::clear_camerapath() {
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CameraReaderWindows::camerapath() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CameraReaderWindows.cameraPath)
  return camerapath_.GetNoArena();
}
void CameraReaderWindows::set_camerapath(const ::std::string& value) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraReaderWindows.CameraReaderWindows.cameraPath)
}
#if LANG_CXX11
void CameraReaderWindows::set_camerapath(::std::string&& value) {
  
  camerapath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraReaderWindows.CameraReaderWindows.cameraPath)
}
#endif
void CameraReaderWindows::set_camerapath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraReaderWindows.CameraReaderWindows.cameraPath)
}
void CameraReaderWindows::set_camerapath(const char* value, size_t size) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraReaderWindows.CameraReaderWindows.cameraPath)
}
::std::string* CameraReaderWindows::mutable_camerapath() {
  
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.CameraReaderWindows.cameraPath)
  return camerapath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraReaderWindows::release_camerapath() {
  // @@protoc_insertion_point(field_release:cameraReaderWindows.CameraReaderWindows.cameraPath)
  
  return camerapath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraReaderWindows::set_allocated_camerapath(::std::string* camerapath) {
  if (camerapath != NULL) {
    
  } else {
    
  }
  camerapath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camerapath);
  // @@protoc_insertion_point(field_set_allocated:cameraReaderWindows.CameraReaderWindows.cameraPath)
}

// repeated .cameraReaderWindows.CaptureFormat formats = 7;
int CameraReaderWindows::formats_size() const {
  return formats_.size();
}
void CameraReaderWindows::clear_formats() {
  formats_.Clear();
}
const ::cameraReaderWindows::CaptureFormat& CameraReaderWindows::formats(int index) const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CameraReaderWindows.formats)
  return formats_.Get(index);
}
::cameraReaderWindows::CaptureFormat* CameraReaderWindows::mutable_formats(int index) {
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.CameraReaderWindows.formats)
  return formats_.Mutable(index);
}
::cameraReaderWindows::CaptureFormat* CameraReaderWindows::add_formats() {
  // @@protoc_insertion_point(field_add:cameraReaderWindows.CameraReaderWindows.formats)
  return formats_.Add();
}
::google::protobuf::RepeatedPtrField< ::cameraReaderWindows::CaptureFormat >*
CameraReaderWindows::mutable_formats() {
  // @@protoc_insertion_point(field_mutable_list:cameraReaderWindows.CameraReaderWindows.formats)
  return &formats_;
}
const ::google::protobuf::RepeatedPtrField< ::cameraReaderWindows::CaptureFormat >&
CameraReaderWindows::formats() const {
  // @@protoc_insertion_point(field_list:cameraReaderWindows.CameraReaderWindows.formats)
  return formats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraList::kCamerasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraList::CameraList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraReaderWindows.CameraList)
}
CameraList::CameraList(const CameraList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cameras_(from.cameras_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraReaderWindows.CameraList)
}

void CameraList::SharedCtor() {
  _cached_size_ = 0;
}

CameraList::~CameraList() {
  // @@protoc_insertion_point(destructor:cameraReaderWindows.CameraList)
  SharedDtor();
}

void CameraList::SharedDtor() {
}

void CameraList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraList::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraList& CameraList::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraList* CameraList::New(::google::protobuf::Arena* arena) const {
  CameraList* n = new CameraList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraReaderWindows.CameraList)
  cameras_.Clear();
}

bool CameraList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraReaderWindows.CameraList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cameraReaderWindows.CameraReaderWindows cameras = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraReaderWindows.CameraList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraReaderWindows.CameraList)
  return false;
#undef DO_
}

void CameraList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraReaderWindows.CameraList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cameraReaderWindows.CameraReaderWindows cameras = 7;
  for (unsigned int i = 0, n = this->cameras_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cameras(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cameraReaderWindows.CameraList)
}

::google::protobuf::uint8* CameraList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraReaderWindows.CameraList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cameraReaderWindows.CameraReaderWindows cameras = 7;
  for (unsigned int i = 0, n = this->cameras_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->cameras(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cameraReaderWindows.CameraList)
  return target;
}

size_t CameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraReaderWindows.CameraList)
  size_t total_size = 0;

  // repeated .cameraReaderWindows.CameraReaderWindows cameras = 7;
  {
    unsigned int count = this->cameras_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameras(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraReaderWindows.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraReaderWindows.CameraList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraReaderWindows.CameraList)
    MergeFrom(*source);
  }
}

void CameraList::MergeFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraReaderWindows.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
}

void CameraList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraReaderWindows.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraList::CopyFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraReaderWindows.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraList::IsInitialized() const {
  return true;
}

void CameraList::Swap(CameraList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraList::InternalSwap(CameraList* other) {
  cameras_.InternalSwap(&other->cameras_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraList::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraList

// repeated .cameraReaderWindows.CameraReaderWindows cameras = 7;
int CameraList::cameras_size() const {
  return cameras_.size();
}
void CameraList::clear_cameras() {
  cameras_.Clear();
}
const ::cameraReaderWindows::CameraReaderWindows& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.CameraList.cameras)
  return cameras_.Get(index);
}
::cameraReaderWindows::CameraReaderWindows* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.CameraList.cameras)
  return cameras_.Mutable(index);
}
::cameraReaderWindows::CameraReaderWindows* CameraList::add_cameras() {
  // @@protoc_insertion_point(field_add:cameraReaderWindows.CameraList.cameras)
  return cameras_.Add();
}
::google::protobuf::RepeatedPtrField< ::cameraReaderWindows::CameraReaderWindows >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:cameraReaderWindows.CameraList.cameras)
  return &cameras_;
}
const ::google::protobuf::RepeatedPtrField< ::cameraReaderWindows::CameraReaderWindows >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:cameraReaderWindows.CameraList.cameras)
  return cameras_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartCaptureArguments::kCameraNameFieldNumber;
const int StartCaptureArguments::kCameraPathFieldNumber;
const int StartCaptureArguments::kWidthFieldNumber;
const int StartCaptureArguments::kHeightFieldNumber;
const int StartCaptureArguments::kFrameintervalFieldNumber;
const int StartCaptureArguments::kEncodingFieldNumber;
const int StartCaptureArguments::kFlippingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartCaptureArguments::StartCaptureArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraReaderWindows.StartCaptureArguments)
}
StartCaptureArguments::StartCaptureArguments(const StartCaptureArguments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cameraname().size() > 0) {
    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  camerapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camerapath().size() > 0) {
    camerapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camerapath_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&flippingmode_) -
    reinterpret_cast<char*>(&width_) + sizeof(flippingmode_));
  // @@protoc_insertion_point(copy_constructor:cameraReaderWindows.StartCaptureArguments)
}

void StartCaptureArguments::SharedCtor() {
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&flippingmode_) -
    reinterpret_cast<char*>(&width_) + sizeof(flippingmode_));
  _cached_size_ = 0;
}

StartCaptureArguments::~StartCaptureArguments() {
  // @@protoc_insertion_point(destructor:cameraReaderWindows.StartCaptureArguments)
  SharedDtor();
}

void StartCaptureArguments::SharedDtor() {
  cameraname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartCaptureArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCaptureArguments::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartCaptureArguments& StartCaptureArguments::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartCaptureArguments* StartCaptureArguments::New(::google::protobuf::Arena* arena) const {
  StartCaptureArguments* n = new StartCaptureArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartCaptureArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraReaderWindows.StartCaptureArguments)
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&flippingmode_) -
    reinterpret_cast<char*>(&width_) + sizeof(flippingmode_));
}

bool StartCaptureArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraReaderWindows.StartCaptureArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cameraName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cameraname().data(), this->cameraname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cameraReaderWindows.StartCaptureArguments.cameraName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cameraPath = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camerapath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camerapath().data(), this->camerapath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cameraReaderWindows.StartCaptureArguments.cameraPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frameinterval = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frameinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cameraReaderWindows.CaptureEncoding encoding = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::cameraReaderWindows::CaptureEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cameraReaderWindows.Flip flippingMode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flippingmode(static_cast< ::cameraReaderWindows::Flip >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraReaderWindows.StartCaptureArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraReaderWindows.StartCaptureArguments)
  return false;
#undef DO_
}

void StartCaptureArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraReaderWindows.StartCaptureArguments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 8;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.StartCaptureArguments.cameraName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cameraname(), output);
  }

  // string cameraPath = 9;
  if (this->camerapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camerapath().data(), this->camerapath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.StartCaptureArguments.cameraPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->camerapath(), output);
  }

  // uint32 width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->width(), output);
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // uint64 frameinterval = 12;
  if (this->frameinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->frameinterval(), output);
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 13;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->encoding(), output);
  }

  // .cameraReaderWindows.Flip flippingMode = 14;
  if (this->flippingmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->flippingmode(), output);
  }

  // @@protoc_insertion_point(serialize_end:cameraReaderWindows.StartCaptureArguments)
}

::google::protobuf::uint8* StartCaptureArguments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraReaderWindows.StartCaptureArguments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 8;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.StartCaptureArguments.cameraName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cameraname(), target);
  }

  // string cameraPath = 9;
  if (this->camerapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camerapath().data(), this->camerapath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cameraReaderWindows.StartCaptureArguments.cameraPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->camerapath(), target);
  }

  // uint32 width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->width(), target);
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // uint64 frameinterval = 12;
  if (this->frameinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->frameinterval(), target);
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 13;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->encoding(), target);
  }

  // .cameraReaderWindows.Flip flippingMode = 14;
  if (this->flippingmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->flippingmode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cameraReaderWindows.StartCaptureArguments)
  return target;
}

size_t StartCaptureArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraReaderWindows.StartCaptureArguments)
  size_t total_size = 0;

  // string cameraName = 8;
  if (this->cameraname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cameraname());
  }

  // string cameraPath = 9;
  if (this->camerapath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camerapath());
  }

  // uint32 width = 10;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint64 frameinterval = 12;
  if (this->frameinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frameinterval());
  }

  // .cameraReaderWindows.CaptureEncoding encoding = 13;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // .cameraReaderWindows.Flip flippingMode = 14;
  if (this->flippingmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flippingmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCaptureArguments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraReaderWindows.StartCaptureArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const StartCaptureArguments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartCaptureArguments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraReaderWindows.StartCaptureArguments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraReaderWindows.StartCaptureArguments)
    MergeFrom(*source);
  }
}

void StartCaptureArguments::MergeFrom(const StartCaptureArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraReaderWindows.StartCaptureArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraname().size() > 0) {

    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  if (from.camerapath().size() > 0) {

    camerapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camerapath_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.frameinterval() != 0) {
    set_frameinterval(from.frameinterval());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.flippingmode() != 0) {
    set_flippingmode(from.flippingmode());
  }
}

void StartCaptureArguments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraReaderWindows.StartCaptureArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCaptureArguments::CopyFrom(const StartCaptureArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraReaderWindows.StartCaptureArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCaptureArguments::IsInitialized() const {
  return true;
}

void StartCaptureArguments::Swap(StartCaptureArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartCaptureArguments::InternalSwap(StartCaptureArguments* other) {
  cameraname_.Swap(&other->cameraname_);
  camerapath_.Swap(&other->camerapath_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(frameinterval_, other->frameinterval_);
  std::swap(encoding_, other->encoding_);
  std::swap(flippingmode_, other->flippingmode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartCaptureArguments::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartCaptureArguments

// string cameraName = 8;
void StartCaptureArguments::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartCaptureArguments::cameraname() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.cameraName)
  return cameraname_.GetNoArena();
}
void StartCaptureArguments::set_cameraname(const ::std::string& value) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.cameraName)
}
#if LANG_CXX11
void StartCaptureArguments::set_cameraname(::std::string&& value) {
  
  cameraname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraReaderWindows.StartCaptureArguments.cameraName)
}
#endif
void StartCaptureArguments::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraReaderWindows.StartCaptureArguments.cameraName)
}
void StartCaptureArguments::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraReaderWindows.StartCaptureArguments.cameraName)
}
::std::string* StartCaptureArguments::mutable_cameraname() {
  
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.StartCaptureArguments.cameraName)
  return cameraname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartCaptureArguments::release_cameraname() {
  // @@protoc_insertion_point(field_release:cameraReaderWindows.StartCaptureArguments.cameraName)
  
  return cameraname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartCaptureArguments::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname != NULL) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:cameraReaderWindows.StartCaptureArguments.cameraName)
}

// string cameraPath = 9;
void StartCaptureArguments::clear_camerapath() {
  camerapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartCaptureArguments::camerapath() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.cameraPath)
  return camerapath_.GetNoArena();
}
void StartCaptureArguments::set_camerapath(const ::std::string& value) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.cameraPath)
}
#if LANG_CXX11
void StartCaptureArguments::set_camerapath(::std::string&& value) {
  
  camerapath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraReaderWindows.StartCaptureArguments.cameraPath)
}
#endif
void StartCaptureArguments::set_camerapath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraReaderWindows.StartCaptureArguments.cameraPath)
}
void StartCaptureArguments::set_camerapath(const char* value, size_t size) {
  
  camerapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraReaderWindows.StartCaptureArguments.cameraPath)
}
::std::string* StartCaptureArguments::mutable_camerapath() {
  
  // @@protoc_insertion_point(field_mutable:cameraReaderWindows.StartCaptureArguments.cameraPath)
  return camerapath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartCaptureArguments::release_camerapath() {
  // @@protoc_insertion_point(field_release:cameraReaderWindows.StartCaptureArguments.cameraPath)
  
  return camerapath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartCaptureArguments::set_allocated_camerapath(::std::string* camerapath) {
  if (camerapath != NULL) {
    
  } else {
    
  }
  camerapath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camerapath);
  // @@protoc_insertion_point(field_set_allocated:cameraReaderWindows.StartCaptureArguments.cameraPath)
}

// uint32 width = 10;
void StartCaptureArguments::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 StartCaptureArguments::width() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.width)
  return width_;
}
void StartCaptureArguments::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.width)
}

// uint32 height = 11;
void StartCaptureArguments::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 StartCaptureArguments::height() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.height)
  return height_;
}
void StartCaptureArguments::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.height)
}

// uint64 frameinterval = 12;
void StartCaptureArguments::clear_frameinterval() {
  frameinterval_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StartCaptureArguments::frameinterval() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.frameinterval)
  return frameinterval_;
}
void StartCaptureArguments::set_frameinterval(::google::protobuf::uint64 value) {
  
  frameinterval_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.frameinterval)
}

// .cameraReaderWindows.CaptureEncoding encoding = 13;
void StartCaptureArguments::clear_encoding() {
  encoding_ = 0;
}
::cameraReaderWindows::CaptureEncoding StartCaptureArguments::encoding() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.encoding)
  return static_cast< ::cameraReaderWindows::CaptureEncoding >(encoding_);
}
void StartCaptureArguments::set_encoding(::cameraReaderWindows::CaptureEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.encoding)
}

// .cameraReaderWindows.Flip flippingMode = 14;
void StartCaptureArguments::clear_flippingmode() {
  flippingmode_ = 0;
}
::cameraReaderWindows::Flip StartCaptureArguments::flippingmode() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureArguments.flippingMode)
  return static_cast< ::cameraReaderWindows::Flip >(flippingmode_);
}
void StartCaptureArguments::set_flippingmode(::cameraReaderWindows::Flip value) {
  
  flippingmode_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureArguments.flippingMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartCaptureResult::kCanResetGraphFieldNumber;
const int StartCaptureResult::kCanSetAudioConfigFieldNumber;
const int StartCaptureResult::kCanSetVideoConfigFieldNumber;
const int StartCaptureResult::kCanConnectFiltersFieldNumber;
const int StartCaptureResult::kResultFieldNumber;
const int StartCaptureResult::kDevicePointerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartCaptureResult::StartCaptureResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraReaderWindows.StartCaptureResult)
}
StartCaptureResult::StartCaptureResult(const StartCaptureResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&canresetgraph_, &from.canresetgraph_,
    reinterpret_cast<char*>(&devicepointer_) -
    reinterpret_cast<char*>(&canresetgraph_) + sizeof(devicepointer_));
  // @@protoc_insertion_point(copy_constructor:cameraReaderWindows.StartCaptureResult)
}

void StartCaptureResult::SharedCtor() {
  ::memset(&canresetgraph_, 0, reinterpret_cast<char*>(&devicepointer_) -
    reinterpret_cast<char*>(&canresetgraph_) + sizeof(devicepointer_));
  _cached_size_ = 0;
}

StartCaptureResult::~StartCaptureResult() {
  // @@protoc_insertion_point(destructor:cameraReaderWindows.StartCaptureResult)
  SharedDtor();
}

void StartCaptureResult::SharedDtor() {
}

void StartCaptureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCaptureResult::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartCaptureResult& StartCaptureResult::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartCaptureResult* StartCaptureResult::New(::google::protobuf::Arena* arena) const {
  StartCaptureResult* n = new StartCaptureResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartCaptureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraReaderWindows.StartCaptureResult)
  ::memset(&canresetgraph_, 0, reinterpret_cast<char*>(&devicepointer_) -
    reinterpret_cast<char*>(&canresetgraph_) + sizeof(devicepointer_));
}

bool StartCaptureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraReaderWindows.StartCaptureResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool canResetGraph = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canresetgraph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canSetAudioConfig = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cansetaudioconfig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canSetVideoConfig = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cansetvideoconfig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canConnectFilters = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canconnectfilters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cameraReaderWindows.StartResult result = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::cameraReaderWindows::StartResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 devicePointer = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &devicepointer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraReaderWindows.StartCaptureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraReaderWindows.StartCaptureResult)
  return false;
#undef DO_
}

void StartCaptureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraReaderWindows.StartCaptureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canResetGraph = 14;
  if (this->canresetgraph() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->canresetgraph(), output);
  }

  // bool canSetAudioConfig = 15;
  if (this->cansetaudioconfig() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->cansetaudioconfig(), output);
  }

  // bool canSetVideoConfig = 16;
  if (this->cansetvideoconfig() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->cansetvideoconfig(), output);
  }

  // bool canConnectFilters = 17;
  if (this->canconnectfilters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->canconnectfilters(), output);
  }

  // .cameraReaderWindows.StartResult result = 18;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->result(), output);
  }

  // uint64 devicePointer = 19;
  if (this->devicepointer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->devicepointer(), output);
  }

  // @@protoc_insertion_point(serialize_end:cameraReaderWindows.StartCaptureResult)
}

::google::protobuf::uint8* StartCaptureResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraReaderWindows.StartCaptureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canResetGraph = 14;
  if (this->canresetgraph() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->canresetgraph(), target);
  }

  // bool canSetAudioConfig = 15;
  if (this->cansetaudioconfig() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->cansetaudioconfig(), target);
  }

  // bool canSetVideoConfig = 16;
  if (this->cansetvideoconfig() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->cansetvideoconfig(), target);
  }

  // bool canConnectFilters = 17;
  if (this->canconnectfilters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->canconnectfilters(), target);
  }

  // .cameraReaderWindows.StartResult result = 18;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->result(), target);
  }

  // uint64 devicePointer = 19;
  if (this->devicepointer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->devicepointer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cameraReaderWindows.StartCaptureResult)
  return target;
}

size_t StartCaptureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraReaderWindows.StartCaptureResult)
  size_t total_size = 0;

  // bool canResetGraph = 14;
  if (this->canresetgraph() != 0) {
    total_size += 1 + 1;
  }

  // bool canSetAudioConfig = 15;
  if (this->cansetaudioconfig() != 0) {
    total_size += 1 + 1;
  }

  // bool canSetVideoConfig = 16;
  if (this->cansetvideoconfig() != 0) {
    total_size += 2 + 1;
  }

  // bool canConnectFilters = 17;
  if (this->canconnectfilters() != 0) {
    total_size += 2 + 1;
  }

  // .cameraReaderWindows.StartResult result = 18;
  if (this->result() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // uint64 devicePointer = 19;
  if (this->devicepointer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->devicepointer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCaptureResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraReaderWindows.StartCaptureResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StartCaptureResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartCaptureResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraReaderWindows.StartCaptureResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraReaderWindows.StartCaptureResult)
    MergeFrom(*source);
  }
}

void StartCaptureResult::MergeFrom(const StartCaptureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraReaderWindows.StartCaptureResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.canresetgraph() != 0) {
    set_canresetgraph(from.canresetgraph());
  }
  if (from.cansetaudioconfig() != 0) {
    set_cansetaudioconfig(from.cansetaudioconfig());
  }
  if (from.cansetvideoconfig() != 0) {
    set_cansetvideoconfig(from.cansetvideoconfig());
  }
  if (from.canconnectfilters() != 0) {
    set_canconnectfilters(from.canconnectfilters());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.devicepointer() != 0) {
    set_devicepointer(from.devicepointer());
  }
}

void StartCaptureResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraReaderWindows.StartCaptureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCaptureResult::CopyFrom(const StartCaptureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraReaderWindows.StartCaptureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCaptureResult::IsInitialized() const {
  return true;
}

void StartCaptureResult::Swap(StartCaptureResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartCaptureResult::InternalSwap(StartCaptureResult* other) {
  std::swap(canresetgraph_, other->canresetgraph_);
  std::swap(cansetaudioconfig_, other->cansetaudioconfig_);
  std::swap(cansetvideoconfig_, other->cansetvideoconfig_);
  std::swap(canconnectfilters_, other->canconnectfilters_);
  std::swap(result_, other->result_);
  std::swap(devicepointer_, other->devicepointer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartCaptureResult::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartCaptureResult

// bool canResetGraph = 14;
void StartCaptureResult::clear_canresetgraph() {
  canresetgraph_ = false;
}
bool StartCaptureResult::canresetgraph() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.canResetGraph)
  return canresetgraph_;
}
void StartCaptureResult::set_canresetgraph(bool value) {
  
  canresetgraph_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.canResetGraph)
}

// bool canSetAudioConfig = 15;
void StartCaptureResult::clear_cansetaudioconfig() {
  cansetaudioconfig_ = false;
}
bool StartCaptureResult::cansetaudioconfig() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.canSetAudioConfig)
  return cansetaudioconfig_;
}
void StartCaptureResult::set_cansetaudioconfig(bool value) {
  
  cansetaudioconfig_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.canSetAudioConfig)
}

// bool canSetVideoConfig = 16;
void StartCaptureResult::clear_cansetvideoconfig() {
  cansetvideoconfig_ = false;
}
bool StartCaptureResult::cansetvideoconfig() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.canSetVideoConfig)
  return cansetvideoconfig_;
}
void StartCaptureResult::set_cansetvideoconfig(bool value) {
  
  cansetvideoconfig_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.canSetVideoConfig)
}

// bool canConnectFilters = 17;
void StartCaptureResult::clear_canconnectfilters() {
  canconnectfilters_ = false;
}
bool StartCaptureResult::canconnectfilters() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.canConnectFilters)
  return canconnectfilters_;
}
void StartCaptureResult::set_canconnectfilters(bool value) {
  
  canconnectfilters_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.canConnectFilters)
}

// .cameraReaderWindows.StartResult result = 18;
void StartCaptureResult::clear_result() {
  result_ = 0;
}
::cameraReaderWindows::StartResult StartCaptureResult::result() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.result)
  return static_cast< ::cameraReaderWindows::StartResult >(result_);
}
void StartCaptureResult::set_result(::cameraReaderWindows::StartResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.result)
}

// uint64 devicePointer = 19;
void StartCaptureResult::clear_devicepointer() {
  devicepointer_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StartCaptureResult::devicepointer() const {
  // @@protoc_insertion_point(field_get:cameraReaderWindows.StartCaptureResult.devicePointer)
  return devicepointer_;
}
void StartCaptureResult::set_devicepointer(::google::protobuf::uint64 value) {
  
  devicepointer_ = value;
  // @@protoc_insertion_point(field_set:cameraReaderWindows.StartCaptureResult.devicePointer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cameraReaderWindows

// @@protoc_insertion_point(global_scope)
