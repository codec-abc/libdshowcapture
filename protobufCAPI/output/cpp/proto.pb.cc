// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace camera {
class CaptureFormatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaptureFormat> {
} _CaptureFormat_default_instance_;
class CameraDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Camera> {
} _Camera_default_instance_;
class CameraListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CameraList> {
} _CameraList_default_instance_;

namespace protobuf_proto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureFormat, isautoconvertsupported_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, cameraname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, formats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraList, cameras_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CaptureFormat)},
  { 10, -1, sizeof(Camera)},
  { 17, -1, sizeof(CameraList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CaptureFormat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Camera_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CaptureFormat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Camera_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CameraList_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CaptureFormat_default_instance_.DefaultConstruct();
  _Camera_default_instance_.DefaultConstruct();
  _CameraList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013proto.proto\022\006camera\"\214\001\n\rCaptureFormat\022"
      "\r\n\005width\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\021\n\tframer"
      "ate\030\003 \001(\001\022)\n\010encoding\030\004 \001(\0162\027.camera.Cap"
      "tureEncoding\022\036\n\026isAutoConvertSupported\030\005"
      " \001(\010\"D\n\006Camera\022\022\n\ncameraName\030\005 \001(\t\022&\n\007fo"
      "rmats\030\006 \003(\0132\025.camera.CaptureFormat\"-\n\nCa"
      "meraList\022\037\n\007cameras\030\007 \003(\0132\016.camera.Camer"
      "a*S\n\017CaptureEncoding\022\013\n\007UNKNOWN\020\000\022\n\n\006RGB"
      "A32\020\001\022\t\n\005RGB24\020\002\022\010\n\004YUY2\020\003\022\010\n\004NV12\020\004\022\010\n\004"
      "MJPG\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2eproto

const ::google::protobuf::EnumDescriptor* CaptureEncoding_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[0];
}
bool CaptureEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureFormat::kWidthFieldNumber;
const int CaptureFormat::kHeightFieldNumber;
const int CaptureFormat::kFramerateFieldNumber;
const int CaptureFormat::kEncodingFieldNumber;
const int CaptureFormat::kIsAutoConvertSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureFormat::CaptureFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera.CaptureFormat)
}
CaptureFormat::CaptureFormat(const CaptureFormat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&isautoconvertsupported_) -
    reinterpret_cast<char*>(&width_) + sizeof(isautoconvertsupported_));
  // @@protoc_insertion_point(copy_constructor:camera.CaptureFormat)
}

void CaptureFormat::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&isautoconvertsupported_) -
    reinterpret_cast<char*>(&width_) + sizeof(isautoconvertsupported_));
  _cached_size_ = 0;
}

CaptureFormat::~CaptureFormat() {
  // @@protoc_insertion_point(destructor:camera.CaptureFormat)
  SharedDtor();
}

void CaptureFormat::SharedDtor() {
}

void CaptureFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureFormat::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CaptureFormat& CaptureFormat::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaptureFormat* CaptureFormat::New(::google::protobuf::Arena* arena) const {
  CaptureFormat* n = new CaptureFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptureFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:camera.CaptureFormat)
  ::memset(&width_, 0, reinterpret_cast<char*>(&isautoconvertsupported_) -
    reinterpret_cast<char*>(&width_) + sizeof(isautoconvertsupported_));
}

bool CaptureFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera.CaptureFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double framerate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .camera.CaptureEncoding encoding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::camera::CaptureEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAutoConvertSupported = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautoconvertsupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera.CaptureFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera.CaptureFormat)
  return false;
#undef DO_
}

void CaptureFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera.CaptureFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // double framerate = 3;
  if (this->framerate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->framerate(), output);
  }

  // .camera.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encoding(), output);
  }

  // bool isAutoConvertSupported = 5;
  if (this->isautoconvertsupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isautoconvertsupported(), output);
  }

  // @@protoc_insertion_point(serialize_end:camera.CaptureFormat)
}

::google::protobuf::uint8* CaptureFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:camera.CaptureFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // double framerate = 3;
  if (this->framerate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->framerate(), target);
  }

  // .camera.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encoding(), target);
  }

  // bool isAutoConvertSupported = 5;
  if (this->isautoconvertsupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isautoconvertsupported(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:camera.CaptureFormat)
  return target;
}

size_t CaptureFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera.CaptureFormat)
  size_t total_size = 0;

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // double framerate = 3;
  if (this->framerate() != 0) {
    total_size += 1 + 8;
  }

  // .camera.CaptureEncoding encoding = 4;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // bool isAutoConvertSupported = 5;
  if (this->isautoconvertsupported() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera.CaptureFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const CaptureFormat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CaptureFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera.CaptureFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera.CaptureFormat)
    MergeFrom(*source);
  }
}

void CaptureFormat::MergeFrom(const CaptureFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera.CaptureFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.isautoconvertsupported() != 0) {
    set_isautoconvertsupported(from.isautoconvertsupported());
  }
}

void CaptureFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera.CaptureFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureFormat::CopyFrom(const CaptureFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera.CaptureFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureFormat::IsInitialized() const {
  return true;
}

void CaptureFormat::Swap(CaptureFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureFormat::InternalSwap(CaptureFormat* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(framerate_, other->framerate_);
  std::swap(encoding_, other->encoding_);
  std::swap(isautoconvertsupported_, other->isautoconvertsupported_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaptureFormat::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureFormat

// uint32 width = 1;
void CaptureFormat::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 CaptureFormat::width() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.width)
  return width_;
}
void CaptureFormat::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.width)
}

// uint32 height = 2;
void CaptureFormat::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 CaptureFormat::height() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.height)
  return height_;
}
void CaptureFormat::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.height)
}

// double framerate = 3;
void CaptureFormat::clear_framerate() {
  framerate_ = 0;
}
double CaptureFormat::framerate() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.framerate)
  return framerate_;
}
void CaptureFormat::set_framerate(double value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.framerate)
}

// .camera.CaptureEncoding encoding = 4;
void CaptureFormat::clear_encoding() {
  encoding_ = 0;
}
::camera::CaptureEncoding CaptureFormat::encoding() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.encoding)
  return static_cast< ::camera::CaptureEncoding >(encoding_);
}
void CaptureFormat::set_encoding(::camera::CaptureEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.encoding)
}

// bool isAutoConvertSupported = 5;
void CaptureFormat::clear_isautoconvertsupported() {
  isautoconvertsupported_ = false;
}
bool CaptureFormat::isautoconvertsupported() const {
  // @@protoc_insertion_point(field_get:camera.CaptureFormat.isAutoConvertSupported)
  return isautoconvertsupported_;
}
void CaptureFormat::set_isautoconvertsupported(bool value) {
  
  isautoconvertsupported_ = value;
  // @@protoc_insertion_point(field_set:camera.CaptureFormat.isAutoConvertSupported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Camera::kCameraNameFieldNumber;
const int Camera::kFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Camera::Camera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera.Camera)
}
Camera::Camera(const Camera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      formats_(from.formats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cameraname().size() > 0) {
    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  // @@protoc_insertion_point(copy_constructor:camera.Camera)
}

void Camera::SharedCtor() {
  cameraname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:camera.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  cameraname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Camera& Camera::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Camera* Camera::New(::google::protobuf::Arena* arena) const {
  Camera* n = new Camera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:camera.Camera)
  formats_.Clear();
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cameraName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cameraname().data(), this->cameraname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camera.Camera.cameraName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .camera.CaptureFormat formats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camera.Camera.cameraName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cameraname(), output);
  }

  // repeated .camera.CaptureFormat formats = 6;
  for (unsigned int i = 0, n = this->formats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->formats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:camera.Camera)
}

::google::protobuf::uint8* Camera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:camera.Camera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camera.Camera.cameraName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cameraname(), target);
  }

  // repeated .camera.CaptureFormat formats = 6;
  for (unsigned int i = 0, n = this->formats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->formats(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:camera.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera.Camera)
  size_t total_size = 0;

  // repeated .camera.CaptureFormat formats = 6;
  {
    unsigned int count = this->formats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formats(i));
    }
  }

  // string cameraName = 5;
  if (this->cameraname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cameraname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Camera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera.Camera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formats_.MergeFrom(from.formats_);
  if (from.cameraname().size() > 0) {

    cameraname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::Swap(Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Camera::InternalSwap(Camera* other) {
  formats_.InternalSwap(&other->formats_);
  cameraname_.Swap(&other->cameraname_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Camera

// string cameraName = 5;
void Camera::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Camera::cameraname() const {
  // @@protoc_insertion_point(field_get:camera.Camera.cameraName)
  return cameraname_.GetNoArena();
}
void Camera::set_cameraname(const ::std::string& value) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.Camera.cameraName)
}
#if LANG_CXX11
void Camera::set_cameraname(::std::string&& value) {
  
  cameraname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.Camera.cameraName)
}
#endif
void Camera::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.Camera.cameraName)
}
void Camera::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.Camera.cameraName)
}
::std::string* Camera::mutable_cameraname() {
  
  // @@protoc_insertion_point(field_mutable:camera.Camera.cameraName)
  return cameraname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Camera::release_cameraname() {
  // @@protoc_insertion_point(field_release:camera.Camera.cameraName)
  
  return cameraname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Camera::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname != NULL) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:camera.Camera.cameraName)
}

// repeated .camera.CaptureFormat formats = 6;
int Camera::formats_size() const {
  return formats_.size();
}
void Camera::clear_formats() {
  formats_.Clear();
}
const ::camera::CaptureFormat& Camera::formats(int index) const {
  // @@protoc_insertion_point(field_get:camera.Camera.formats)
  return formats_.Get(index);
}
::camera::CaptureFormat* Camera::mutable_formats(int index) {
  // @@protoc_insertion_point(field_mutable:camera.Camera.formats)
  return formats_.Mutable(index);
}
::camera::CaptureFormat* Camera::add_formats() {
  // @@protoc_insertion_point(field_add:camera.Camera.formats)
  return formats_.Add();
}
::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >*
Camera::mutable_formats() {
  // @@protoc_insertion_point(field_mutable_list:camera.Camera.formats)
  return &formats_;
}
const ::google::protobuf::RepeatedPtrField< ::camera::CaptureFormat >&
Camera::formats() const {
  // @@protoc_insertion_point(field_list:camera.Camera.formats)
  return formats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraList::kCamerasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraList::CameraList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera.CameraList)
}
CameraList::CameraList(const CameraList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cameras_(from.cameras_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camera.CameraList)
}

void CameraList::SharedCtor() {
  _cached_size_ = 0;
}

CameraList::~CameraList() {
  // @@protoc_insertion_point(destructor:camera.CameraList)
  SharedDtor();
}

void CameraList::SharedDtor() {
}

void CameraList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraList::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraList& CameraList::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraList* CameraList::New(::google::protobuf::Arena* arena) const {
  CameraList* n = new CameraList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:camera.CameraList)
  cameras_.Clear();
}

bool CameraList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera.CameraList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .camera.Camera cameras = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera.CameraList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera.CameraList)
  return false;
#undef DO_
}

void CameraList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera.CameraList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camera.Camera cameras = 7;
  for (unsigned int i = 0, n = this->cameras_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cameras(i), output);
  }

  // @@protoc_insertion_point(serialize_end:camera.CameraList)
}

::google::protobuf::uint8* CameraList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:camera.CameraList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camera.Camera cameras = 7;
  for (unsigned int i = 0, n = this->cameras_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->cameras(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:camera.CameraList)
  return target;
}

size_t CameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera.CameraList)
  size_t total_size = 0;

  // repeated .camera.Camera cameras = 7;
  {
    unsigned int count = this->cameras_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameras(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera.CameraList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera.CameraList)
    MergeFrom(*source);
  }
}

void CameraList::MergeFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera.CameraList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
}

void CameraList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraList::CopyFrom(const CameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera.CameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraList::IsInitialized() const {
  return true;
}

void CameraList::Swap(CameraList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraList::InternalSwap(CameraList* other) {
  cameras_.InternalSwap(&other->cameras_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraList::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraList

// repeated .camera.Camera cameras = 7;
int CameraList::cameras_size() const {
  return cameras_.size();
}
void CameraList::clear_cameras() {
  cameras_.Clear();
}
const ::camera::Camera& CameraList::cameras(int index) const {
  // @@protoc_insertion_point(field_get:camera.CameraList.cameras)
  return cameras_.Get(index);
}
::camera::Camera* CameraList::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:camera.CameraList.cameras)
  return cameras_.Mutable(index);
}
::camera::Camera* CameraList::add_cameras() {
  // @@protoc_insertion_point(field_add:camera.CameraList.cameras)
  return cameras_.Add();
}
::google::protobuf::RepeatedPtrField< ::camera::Camera >*
CameraList::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:camera.CameraList.cameras)
  return &cameras_;
}
const ::google::protobuf::RepeatedPtrField< ::camera::Camera >&
CameraList::cameras() const {
  // @@protoc_insertion_point(field_list:camera.CameraList.cameras)
  return cameras_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace camera

// @@protoc_insertion_point(global_scope)
